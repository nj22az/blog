{
  "version": 3,
  "sources": ["../../../@sanity/color-input/src/LazyColorInput.tsx", "../../../@sanity/color-input/src/schemas/color.tsx", "../../../@sanity/color-input/src/schemas/hslaColor.ts", "../../../@sanity/color-input/src/schemas/hsvaColor.ts", "../../../@sanity/color-input/src/schemas/rgbaColor.ts", "../../../@sanity/color-input/src/index.ts"],
  "sourcesContent": ["import {lazy} from 'react'\n\nexport const ColorInput = lazy(() => import('./ColorInput'))\n", "import {defineType, type ObjectDefinition} from 'sanity'\n\nimport {ColorInput} from '../LazyColorInput'\nimport {type ColorOptions} from '../types'\n\nconst round = (val: number = 1) => Math.round(val * 100)\n\nconst colorTypeName = 'color' as const\n\n/**\n * @public\n */\nexport interface ColorDefinition extends Omit<ObjectDefinition, 'type' | 'fields' | 'options'> {\n  type: typeof colorTypeName\n  options?: ColorOptions\n}\n\ndeclare module '@sanity/types' {\n  // makes type: 'color' narrow correctly when using defineTyp/defineField/defineArrayMember\n  export interface IntrinsicDefinitions {\n    color: ColorDefinition\n  }\n}\n\nexport const color = defineType({\n  name: colorTypeName,\n  type: 'object',\n  title: 'Color',\n  components: {input: ColorInput},\n  fields: [\n    {\n      title: 'Hex',\n      name: 'hex',\n      type: 'string',\n    },\n    {\n      title: 'Alpha',\n      name: 'alpha',\n      type: 'number',\n    },\n    {\n      title: 'Hue Saturation Lightness',\n      name: 'hsl',\n      type: 'hslaColor',\n    },\n    {\n      title: 'Hue Saturation Value',\n      name: 'hsv',\n      type: 'hsvaColor',\n    },\n    {\n      title: 'Red Green Blue (rgb)',\n      name: 'rgb',\n      type: 'rgbaColor',\n    },\n  ],\n  preview: {\n    select: {\n      title: 'hex',\n      alpha: 'alpha',\n      hex: 'hex',\n      hsl: 'hsl',\n    },\n    prepare({\n      title,\n      hex,\n      hsl,\n      alpha,\n    }: {\n      title?: string\n      alpha?: number\n      hex?: string\n      hsl?: {h: number; s: number; l: number}\n    }) {\n      let subtitle = hex || 'No color set'\n      if (hsl) {\n        subtitle = `H:${round(hsl.h)} S:${round(hsl.s)} L:${round(hsl.l)} A:${round(alpha)}`\n      }\n      return {\n        title: title,\n        subtitle: subtitle,\n        media: () => (\n          <div\n            style={{\n              backgroundColor: hex ?? '#000',\n              opacity: alpha ?? 1,\n              position: 'absolute',\n              height: '100%',\n              width: '100%',\n              top: '0',\n              left: '0',\n            }}\n          />\n        ),\n      }\n    },\n  },\n})\n", "import {defineType} from 'sanity'\n\nexport const hslaColor = defineType({\n  title: 'Hue Saturation Lightness',\n  name: 'hslaColor',\n  type: 'object',\n  fields: [\n    {name: 'h', type: 'number', title: 'Hue'},\n    {name: 's', type: 'number', title: 'Saturation'},\n    {name: 'l', type: 'number', title: 'Lightness'},\n    {name: 'a', type: 'number', title: 'Alpha'},\n  ],\n})\n", "import {defineType} from 'sanity'\n\nexport const hsvaColor = defineType({\n  title: 'Hue Saturation Value',\n  name: 'hsvaColor',\n  type: 'object',\n  fields: [\n    {name: 'h', type: 'number', title: 'Hue'},\n    {name: 's', type: 'number', title: 'Saturation'},\n    {name: 'v', type: 'number', title: 'Value'},\n    {name: 'a', type: 'number', title: 'Alpha'},\n  ],\n})\n", "import {defineType} from 'sanity'\n\nexport const rgbaColor = defineType({\n  title: 'Red Green Blue (rgb)',\n  name: 'rgbaColor',\n  type: 'object',\n  fields: [\n    {name: 'r', type: 'number', title: 'Red'},\n    {name: 'g', type: 'number', title: 'Green'},\n    {name: 'b', type: 'number', title: 'Blue'},\n    {name: 'a', type: 'number', title: 'Alpha'},\n  ],\n})\n", "import {definePlugin} from 'sanity'\n\nimport {color, type ColorDefinition} from './schemas/color'\nimport {hslaColor} from './schemas/hslaColor'\nimport {hsvaColor} from './schemas/hsvaColor'\nimport {rgbaColor} from './schemas/rgbaColor'\n\nexport const colorInput = definePlugin({\n  name: '@sanity/color-input',\n  schema: {\n    types: [hslaColor, hsvaColor, rgbaColor, color],\n  },\n})\n\nexport {color, hslaColor, hsvaColor, rgbaColor}\nexport {ColorInput} from './LazyColorInput'\nexport type {ColorDefinition}\nexport type {ColorInputProps, ColorOptions, ColorSchemaType, ColorValue} from './types'\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAEO,IAAM,iBAAa,mBAAK,MAAM,OAAO,0BAAc,CAAC;AAApD,ICGD,QAAQ,CAAC,MAAc,MAAM,KAAK,MAAM,MAAM,GAAG;ADHhD,ICKD,gBAAgB;ADLf,ICsBM,QAAQ,WAAW;EAC9B,MAAM;EACN,MAAM;EACN,OAAO;EACP,YAAY,EAAC,OAAO,WAAU;EAC9B,QAAQ;IACN;MACE,OAAO;MACP,MAAM;MACN,MAAM;IACR;IACA;MACE,OAAO;MACP,MAAM;MACN,MAAM;IACR;IACA;MACE,OAAO;MACP,MAAM;MACN,MAAM;IACR;IACA;MACE,OAAO;MACP,MAAM;MACN,MAAM;IACR;IACA;MACE,OAAO;MACP,MAAM;MACN,MAAM;IAAA;EAEV;EACA,SAAS;IACP,QAAQ;MACN,OAAO;MACP,OAAO;MACP,KAAK;MACL,KAAK;IACP;IACA,QAAQ;MACN;MACA;MACA;MACA;IAAA,GAMC;AACD,UAAI,WAAW,OAAO;AAClB,aAAA,QACF,WAAW,KAAK,MAAM,IAAI,CAAC,CAAC,MAAM,MAAM,IAAI,CAAC,CAAC,MAAM,MAAM,IAAI,CAAC,CAAC,MAAM,MAAM,KAAK,CAAC,KAE7E;QACL;QACA;QACA,OAAO,UACL;UAAC;UAAA;YACC,OAAO;cACL,iBAAiB,OAAO,OAAA,MAAA;cACxB,SAAS,SAAS,OAAA,QAAA;cAClB,UAAU;cACV,QAAQ;cACR,OAAO;cACP,KAAK;cACL,MAAM;YAAA;UACR;QAAA;MAGN;IAAA;EACF;AAEJ,CAAC;AD/FM,IEAM,YAAY,WAAW;EAClC,OAAO;EACP,MAAM;EACN,MAAM;EACN,QAAQ;IACN,EAAC,MAAM,KAAK,MAAM,UAAU,OAAO,MAAK;IACxC,EAAC,MAAM,KAAK,MAAM,UAAU,OAAO,aAAY;IAC/C,EAAC,MAAM,KAAK,MAAM,UAAU,OAAO,YAAW;IAC9C,EAAC,MAAM,KAAK,MAAM,UAAU,OAAO,QAAO;EAAA;AAE9C,CAAC;AFVM,IGAM,YAAY,WAAW;EAClC,OAAO;EACP,MAAM;EACN,MAAM;EACN,QAAQ;IACN,EAAC,MAAM,KAAK,MAAM,UAAU,OAAO,MAAK;IACxC,EAAC,MAAM,KAAK,MAAM,UAAU,OAAO,aAAY;IAC/C,EAAC,MAAM,KAAK,MAAM,UAAU,OAAO,QAAO;IAC1C,EAAC,MAAM,KAAK,MAAM,UAAU,OAAO,QAAO;EAAA;AAE9C,CAAC;AHVM,IIAM,YAAY,WAAW;EAClC,OAAO;EACP,MAAM;EACN,MAAM;EACN,QAAQ;IACN,EAAC,MAAM,KAAK,MAAM,UAAU,OAAO,MAAK;IACxC,EAAC,MAAM,KAAK,MAAM,UAAU,OAAO,QAAO;IAC1C,EAAC,MAAM,KAAK,MAAM,UAAU,OAAO,OAAM;IACzC,EAAC,MAAM,KAAK,MAAM,UAAU,OAAO,QAAO;EAAA;AAE9C,CAAC;AJVM,IKKM,aAAa,aAAa;EACrC,MAAM;EACN,QAAQ;IACN,OAAO,CAAC,WAAW,WAAW,WAAW,KAAK;EAAA;AAElD,CAAC;",
  "names": []
}
